<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[An analysis on iOS Jailbreak（译）]]></title>
    <url>%2F2017%2F08%2F02%2Fanalysis-on-iOS-Jailbreak%2F</url>
    <content type="text"><![CDATA[作者： Huang Heqing 原文链接：https://papers.put.as/papers/ios/2011/ios_jailbreak_analysis.pdf 写在前面：第一次翻译，错误大概很多_(:」∠)_ 另外，这是一篇2011年的旧文章，文章介绍的重放绕过验证的方法已经失效。我也不懂为什么我翻了一篇6年前的文。。 1. 引言• 什么是iOS 越狱&emsp;&emsp;iOS是Apple的移动操作系统，它来源于Mac OS X，也以Darwin为基础，是一个类Unix 的操作系统。iOS最初是专为iPhone开发的，之后也被用在iPod Touch，iPad 和Apple TV上。 在本文中，iOS特指在iDevices即iPhone，iPod，iPad和Apple TV上运行的小型操作系统。这个操作系统大约使用500M的设备存储空间，它有四个抽象层：Core OS（核心操作系统）层，Core Service（核心服务）层，媒体层和Cocoa Touch层。 &emsp;&emsp;出于安全和商业的原因，Apple不允许其操作系统在第三方硬件上运行，同时对在iDevices上使用iOS也有限制。因此，iOS受到了各种形式的入侵攻击，这些入侵攻击着重于增加Apple不支持的功能。这种入侵就叫iOS越狱。 • 为什么要越狱&emsp;&emsp;越狱是一个让iDevices用户获取对iOS操作系统命令行的root访问权限的过程，目的是去除Apple强加的使用限制和访问限制。一旦越狱，iPhone用户就可以（通过像Cydia 这样的安装器）下载App Store不提供的扩展程序和主题，并执行未越狱设备上不可能执行的任务，包括安装Linux之类的非Apple操作系统，或者在旧版本的iDevices上运行多任务（新一代的非越狱设备已有这个功能）。 &emsp;&emsp;Aurik（UCSB的博士生）开发了一个认证服务器来对iOS的旧固件签名（将在后文中介绍），Cydia创始人Jay Freeman通过这个服务器估计得到，有超过10％的iPhone都是越狱的。 &emsp;&emsp;在美国，越狱一台iPod或iPhone的行为属于合法的“合理使用”。然而，有一些越狱者试图非法分享付费的App Store应用程序，这在越狱社区引起了一些冲突，因为它不是越狱的初心，而且显然是非法的。 2. 在越狱后“识别”你自己&emsp;&emsp;为了阻止在设备上运行任意代码，智能手机都有各自的机制。出于安全和商业原因，操作系统和高级应用程序代码在插入设备之前，都需要得到官方签名。Apple出品的iPhone也有类似的几种机制。 以下详细说明了iPhone如何组织iOS固件认证，以及绕过此远程身份认证机制用到的技巧。 • iOS固件验证机制&emsp;&emsp;SHSH Blob是Signature HaSH的缩写。 SHSH Blob是一个128字节的RSA签名，用于验证较新的Apple iOS设备上固件的有效性。 SHSH Blob基于Challenge-Response（质询-响应）验证机制，在每当iDevices想要升级或降级其iOS版本时，用于验证旧固件的有效性。 &emsp;&emsp;唯一芯片ID即ECID是用于唯一标识Apple iDevices的16位十六进制数字。 ECID现在被广泛认为是Apple的新安全功能，旨在阻止对未来固件的越狱。 &emsp;&emsp;它如何阻止越狱呢？ Apple认证使用了结合设备固件的签名散列SHSH和ECID，其中ECID作为其质询 - 响应认证协议中的质询密钥。 认证是为了在iOS软件上进行数字签名。 质询密钥是固件散列值和ECID的组合。 Apple的响应就是SHSH自身，也就是验证固件所需的数字签名。 &emsp;&emsp;在实际认证过程中，用户会看到“Apple正在 验证恢复…”的提示，在此期间，iDevice和Apple认证服务器之间启动了一个质询-响应协议：固件文件的“部分摘要” 被发送到服务器，然后服务器决定是否给它签名。 &emsp;&emsp;在iOS 软件升级或恢复过程中，iTunes作为签名软件。 当恢复iDevice时，iTunes会请求Apple服务器根据ECID和SHSH为设备生成签名，iTunes只能通过该签名来恢复SHSH中指定的固件版本。 在最新修复的固件中，用户将暂时找不到漏洞，所以也不能进行越狱，因为越狱只能在已经发现某些类型的漏洞的固件版本上进行。 越狱团队需要时间在最近更新的固件中挖掘新漏洞，所以新版本固件在某个时间段内是安全的（不可越狱的）。 然而，这样的情况显然是越狱用户不愿意看到的。 后文将介绍一些漏洞细节。 • 绕过固件认证并识别自己&emsp;&emsp;因为质询密钥（ECID+SHSH）是静态的，所以可以保存这个签名的副本用来进行重放攻击，欺骗签名者——iTunes认为一个旧的固件是合法的。为什么我们要得到旧固件的合法性验证呢？因为Apple只会对最新发布的固件版本签名，并且停止在相应iDevices上签名任何更低版本的iOS。当一台iDevice请求官方的恢复时，它只能恢复到更新的固件版本。然而，如2.1所述，越狱只能在旧的、没有打补丁的固件版本上进行。这种官方固件升级机制最初被认为是越狱iDevice的噩梦。 &emsp;&emsp;然而，Aurik正在一个越狱团队工作，这个团队开发出了可以让用户的iTunes指向的服务器。它不仅可以给Apple不再签名的固件版本签名，还可以在认证过程中保存信息，并允许用户在iTune 意外升级了用户固件的情况下，或用户对越狱一无所知时自然地更新到最新版本的情况下降级固件。 &emsp;&emsp;Aurik已经搭建了一个服务器来模仿Apple签名服务器的功能。 和Apple服务器的主要区别在于这个服务器使用“on file”的结果，而不是Apple的即时质询-响应结果。 这个自建服务器扮演中间人（MiM）的角色。 它重放保存的密钥文件以完成质询-响应，欺骗iTunes相信自己正在和官方的Apple认证服务器通信。&emsp;&emsp;然而，如何让iTunes 相信这个自行搭建的服务器仍然是一个问题。在实际中，几种系统都维护了hosts文件，如文件C：\ Windows \ System32 \ … \ hosts \ etc \ hosts（Windows）或/ etc / hosts（Mac OS X），这就为实现这个欺骗计划提供了一个完美的、通过简单的本地操纵就能实现的解决方案。 只需要把111.222.333.111 gs.apple.com这样的条目附加到hosts文件，就足以让iTunes 将请求重定向到地址为111.222.333.111的自行搭建的服务器。 &emsp;&emsp;hosts文件是帮助寻址计算机网络中的网络节点的系统工具之一。 它是操作系统的互联网协议（IP）实现中的常见部分，具有将主机名转换为数字协议地址（即IP地址）的功能，它标识和定位IP网络中的主机。 它和DNS类似但不同，hosts文件由本地计算机管理员直接管理。 因此，该MiM背后的机制与DNS污染类似，但是这是由用户自己完成的。 自行污染本地的hosts文件是不正常的，但这个攻击是无害的。 • 保存SHSH 用于以后的认证（重放攻击）&emsp;&emsp;ECID是Apple保护其iDevices不被操纵的安全措施，几乎每个新的iDevice都受到此安全特性的保护。现在，当拥有这个安全特性的iDevice更新到较新的固件而没有保存ECID SHSH blob时，设备不仅会失去越狱环境，而且不能将iDevice降级到较旧的固件。由于越狱做的是Apple官方没有认定的事情，越狱的整个过程被认为是一种自我解放。 当iTunes认为它正在与Apple的身份验证服务器通信时，实际上它是在与构建的服务器通信。 这将让iTunes访问已经存储在服务器中的“on file”签名结果。 这个服务器还可以作为任何SHSH Blob的缓存，扮演Apple服务器的中介。 它能有效地让用户iDevice用“on file”机制注册，这意味着用户现在可以随时降级固件降级。 只要保存了Apple的签名副本并且在之后返回这个签名，就可以用重放攻击满足用户的降级需求。 &emsp;&emsp;另一个应该强调的有意义的点在于：即使一个用户不越狱，也永远不打算越狱，他也应当考虑使用这项“on file”新服务。因为存在这样一种情况，未来Apple发布了新的操作系统，用户接受了升级，然后意外地破坏了一些重要的东西，比如电子邮件帐户或待办事项列表。 如果没有在其他服务器，比如Cydia上保存旧的签名文件，用户将不能降级和还原前一个系统。 3. 为什么越狱降级和为不同的iDevices备份旧版本的固件如此重要？&emsp;&emsp;这是因为越狱工程基于一些旧固件上的不同漏洞。 当一个漏洞被公开的时候，Apple将采取行动来修补它，并发布相关的新固件版本，并停止给旧的可利用的版本签名。 官方固件更新最初被认为是越狱iDevices 的恶梦。 然而，越狱社区会一直在新发布的固件中挖掘新漏洞，或者持有一些很厉害的，新版本可用的漏洞。在本章里面将根据在Bootchain中出现的级别对漏洞进行分类。 然后说明每种类型的漏洞利用的利弊，并通过比较说明差异。 • iOS 漏洞利用分类和机制1) Userland 漏洞利用&emsp;&emsp;userland漏洞是在系统内部发现的漏洞。它利用系统内置应用程序比如如Safari和邮件接收应用中的漏洞来获取root权限。为了明白这一点，需要了解类UNIX的系统的执行层。在类UNIX环境中通常有两个基本的执行级别，一个是内核模式、内核hooks和内核空间内存访问，另一个是用户模式、用户空间内存访问。术语userland是指所有在用户空间而不是内核空间中运行的代码。 &emsp;&emsp;由于userland越狱利用了运行在用户空间中的一些代码的漏洞，因此是完美越狱，因为没有任何内容可能导致iBoot（与内核模式相关）中的恢复模式循环。但是，这种类型的越狱也有缺点：这种漏洞利用只能拿到文件系统权限，拿不到底层的内核控制权。而且，userland漏洞利用的是应用内置的一些不重要代码的脆弱性，因此很容易被修复。 然而，这种类型的漏洞利用更加用户友好和不依赖平台，因为它与应用层相关，与iBoot层无关。 2) iBoot漏洞利用&emsp;&emsp;和userland漏洞不同，iBoot漏洞利用提供对iOS很底层的控制，包括文件系统和iBoot权限。 &emsp;&emsp;iBoot漏洞是在iDevices的第三引导程序iBoot上发现的，第一和第二引导程序分别是SecureROM和Low Level BootLoader（LLB，稍后将提及它们。它利用iBoot中的漏洞以关闭代码签名机制，这样用户就可以安装并运行那些做“坏事”的程序啦。如果设备刷新了bootrom，这种漏洞利用可能会失效，因为bootrom会检查LLB，而LLB会检查（被修改的）iBoot，然后就会进入recovery screen，用户需要再次利用这个漏洞才能退出，因此这是不完美越狱。bootrom是完全只读的。在iPod Touch 2G之前的iDevice中，bootrom的只读属性给越狱组织带来了很大便利。因为这意味着Apple不可能通过刷新这些设备中的bootrom来加上对LLB的签名检查，同时也意味着Apple不可能修复旧iDevice上某些类型的旧漏洞。 &emsp;&emsp;iBoot越狱更有价值，因为它是更深层次的漏洞利用。利用这种漏洞，用户可以让设备接受自定义固件，并有可能实现永久越狱。 3) Bootrom漏洞利用&emsp;&emsp;由于Apple的新iDevice中加入了新的可刷新的bootrom，越狱组织正在思考新的漏洞利用方法，实现从最底层完全绕过认证链。那就是Bootrom漏洞利用了。这种漏洞利用提供文件系统、iBoot和NOR的权限（自定义引导logo）。Bootrom漏洞存在于iDevice的第一引导程序SecureROM中。它挖掘漏洞以禁用签名检查，可用于加载打补丁的NOR固件（？）。这种漏洞利用不会受限，因为bootrom位于整个认证的代码签名链的最底层，没有什么会去检查bootrom。对这种漏洞，Apple简单打个补丁是不行的，需要更换新的芯片。 &emsp;&emsp;2008年2月27日，iPhone Dev Team证明，他们有能力绕过签名检查，将自定义恢复logo（NOR）加载到iPhone。他们将这个漏洞命名为“Pwnage”。这就是最早的Bootrom漏洞。这是一个超棒的漏洞，因为它来自最底层（硬件闪存中的代码），所以它不能被修复。这个漏洞的利用机制依赖于这样一个事实：Bootrom不会对LLB进行签名检查，从而打破了认证信任链。也就是说，用户可以绕过Bootrom检查来任意地给LLB签名检查打补丁，所以LLB会接受打了补丁的iBoot，而这个iBoot会接受打了补丁的内核，等等等等。 iPhoneLinux 编程——建立用户自己的空间&emsp;&emsp;基于前面介绍的分层的漏洞利用分类和相应的机制及工作环境，可以得出下面的Bootchain（引导链）： SecurityROM → LowLevelBootLoader（LLB） → iBoot → 内核 → 系统软件 Bootrom漏洞利用 → iBoot漏洞利用 → userland漏洞利用 &emsp;&emsp;每个高层在加载下一层之前检查下一层的签名。在搜索越狱组织的时候，我发现了一个有趣的项目正在进行，iPhonelinux旨在在iPhone上移植linux，并制作一个自由（免费软件）操作系统以供选择。此项目的目标之一是替换iBoot之后的部分BootChain： SecurityROM → OpeniBoot → Linux内核 → X服务器 → 窗口管理器 &emsp;&emsp;2010年4月21日，基于iPhoneLinux的Android版本发布了，称为iDroid。 到现在为止，到目前为止，iDroid还没有将Linux内核和Google Android操作系统完全移植到Apple的iDevices上。但是基于“OpeniBoot”引导程序的实现，该团队已经完成了在iDevice上启动Linux内核的工作，使用户可以轻松启动Google Android和任何其他基于Linux的操作系统。用户指导视频和简单教程也已经出现。 &emsp;&emsp;用这种方法，用户可以在iDevices上建立自己的游乐场，而不用受到Apple的限制。 附录——漏洞分类举例1) Userland 漏洞 ○ Symlinks - 适用到 iOS 1.1.1 ○ LibTiff - 适用到 iOS 1.1.1 ○ Mknod - 适用到 iOS 1.1.2 ○ Dual Boot Exploit - 适用到 iOS 2.0 beta 3 ○ MobileBackup Copy Exploit - 适用到 iOS 3.1.3 ○ Malformed CFF Vulnerability - 适用到 iOS 4.0, 4.0.1 2) iBoot 漏洞 ○ Restore Mode -适用到 iOS 1.0.2 ○ Ramdisk Hack - 适用到 iOS 2.0 beta 3 ○ diags - 适用到 iOS 2.0 beta 5 ○ iBoot Environment Variable Overflow - 适用到 iOS 3.1 beta 3 ○ usb_control_msg(0x21, 2) Exploit - 适用到 iOS 3.1.2 ○ ARM7 Go - 适用于 iOS 2.1.1 3) Bootrom 漏洞 ○ Pwnage 1.0 (Ramdisk + AppleImage2NORAccess) ○ Pwnage 2.0 (DFU + Malformed Certificate) ○ 0x24000 Segment Overflow - only in iBoot-240.4 (old bootrom) ○ usb_control_msg(0xA1, 1) Exploit - in iBoot-240.4 and iBoot-240.5.1 0x24000 Segment Overflow - only in iBoot-359.3]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>翻译</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello Gitpage]]></title>
    <url>%2F2017%2F08%2F01%2Fhello-world%2F</url>
    <content type="text"><![CDATA[(●’◡’●)]]></content>
  </entry>
</search>